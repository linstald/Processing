class GroundSegment {
  PVector from;
  PVector to;
  GroundSegment(float x1, float y1, float x2, float y2) {
    from = new PVector(x1, y1);
    to = new PVector(x2, y2);
  }
  
  GroundSegment(PVector A, PVector B) {
    from = A.copy();
    to = B.copy();
  }

  void show() {
    fill(0);
    stroke(0);
    strokeWeight(1);
    line(from.x, from.y, to.x, to.y);
  }
  /**
  *  returns the distance from a Ball to the Line generated by the Segment
  *  using the formula for distance from Point to Line from wikipedia
  */
  private float metricDistance(Ball b) {
    PVector p = b.pos;
    float num = (to.y-from.y)*p.x-(to.x-from.x)*p.y+to.x*from.y-to.y*from.x;
    float denum = sqrt((to.y-from.y)*(to.y-from.y)+(to.x-from.x)*(to.x-from.x));
    return num / denum;
  }
  /**
  *  returns the actual distance to the Segment
  *
  */
  float distance(Ball b) {
    float dist = metricDistance(b);
    PVector p = b.pos;
    
    GroundSegment nS = getExtendedGroundSegment(b);
    PVector projection = PVector.add(p, PVector.mult(getNormal(b), -abs(dist)));
    
    //debug drawings
    stroke(0,0,255);
    strokeWeight(5);
    if(debug)point(projection.x, projection.y);
    
    //return if the projection is on the extended line
    if (utils.isBetween(projection.x, nS.from.x, nS.to.x) && utils.isBetween(projection.y, nS.from.y, nS.to.y)) {
      return dist;
    } else {
      return width*height;
    }
  }
  /**
  *  returns a Vector perpendicular to the
  *  Segment, pointing in the direction of the Ball
  */
  PVector getNormal(Ball b) {
    float x = to.x-from.x;
    float y = to.y-from.y;
    float dist = metricDistance(b);
    return new PVector(y, -x).normalize().mult(dist>0?1:-1);
  }
  /**
  *  returns a new Segment which is a bit longer, such that
  *  we can use it for calculations where the Ball interects at the edge
  */
  GroundSegment getExtendedGroundSegment(Ball b){
    PVector gsdir = PVector.sub(from, to).normalize().mult(b.r);
    PVector A = PVector.add(from, gsdir);
    PVector B = PVector.sub(to, gsdir);
    return new GroundSegment(A, B);
  }
}
